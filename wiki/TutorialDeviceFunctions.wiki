#summary Introducing CUDA __device__ functions.

= `__device__` Functions =

In the last couple sections, we learned how to use the `__global__` keyword to mark a function as code that the host can call to cause the invocation of a parallel kernel on the device. Within a `__global__` function, each CUDA thread so spawned follows its own path of execution _serially_.  In CUDA, kernels consist of mostly arbitrary C/C++ code, so they can get sophisticated quickly.  As productive parallel programmers, we'll will want to [http://en.wikipedia.org/wiki/Abstraction_(computer_science) abstract] and [http://en.wikipedia.org/wiki/Information_hiding encapsulate] our kernel code into functions.

The `__device__` keyword lets us mark functions as callable from threads executing on the device.  The syntax is like the `__global__` keyword: we just prepend it to the function signature:

{{{
__device__ float my_device_function(float x)
{
  return x + 1;
}
}}}

Though `__device__` functions are similar to `__global__` functions in that they are executed by device threads, they actually behave more like normal C functions.  Unlike `__global__` functions, `__device__` functions cannot be configured (no `<<<B,T>>>` needed) and aren't subject to any special restrictions on the types of their parameters or results.  Host code isn't allowed to call `__device__` functions directly -- if we want access to the functionality in a `__device__` function, we need to write a `__global__` function to call it for us!

As you might expect, `__device__` functions can call other functions decorated with `__device__`:

{{{
__device__ float my_second_device_function(float y)
{
  return my_device_function(y) / 2;
}
}}}

As long as they don't call themselves:

{{{
__device__ int my_illegal_recursive_device_function(int x)
{
  if(x == 0) return 1;
  return x * my_illegal_recursive_device_function(x-1);
}
}}}

This code produces the following compiler error:

{{{
$nvcc factorial.cu
factorial.cu
./factorial.cu(4): Error: Recursive function call is not supported yet: _Z36my_illegal_recursive_device_functioni
}}}